---
- hosts: all
  user: root
  become: yes
  tasks:

  - name: ensure directories for symlinks exist
    file: state=directory dest={{item}}
    with_lines: cat ~/config/ansible/files/dirs_new | sed -e 's/ *#.*$//'
  - name: symlink system files
    file: state=hard force=yes src={{item}} dest={{item|basename|regex_replace('___','/')}}
    with_fileglob: ~/config/ansible/files/system_new/minimal/*
    with_fileglob: ~/config/ansible/files/system_new/{{ system_name }}/*
  - name: set hostname for current session
    shell: hostname {{ system_name }} 

  # Init package management.
  - name: update package lists
    apt: update_cache=yes
  - name: APT - dist-upgrade
    apt: upgrade=dist

  # Ensure power management.
  - name: ensure power management tools are installed
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/power_management | sed -e 's/ *#.*$//'
  - name: start TLP
    shell: tlp start

  # Configure console.
  #
  # For some reason, some settings are only applied two reboots after this.
  - name: symlink console config files
    file: state=link force=yes src={{item}} dest={{item|basename|regex_replace('___','/')}}
    with_fileglob: ~/config/ansible/files/console/*
  - name: ensure locales and console-setup are installed
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/console | sed -e 's/ *#.*$//'
  - name: generate en_US.UTF-8 locale
    locale_gen: name=en_US.UTF-8 state=present
  - name: Touch keyboard config file so setupcon does not ignore it.
    command: touch /etc/default/keyboard
  - name: run setupcon to apply console settings from /etc/default/
    command: setupcon

  # Miscellaneous.
  - name: Ensure dotfile symlinks
    file: state=link force=yes src={{item}} dest=~/.{{item|basename}}
    with_fileglob:
    - ~/config/dotfiles/minimal/*
    - ~/config/dotfiles/root/*
  - name: ensure ~/.vimbackups directory
    file: state=directory dest=~/.vimbackups
  - name: ensure man-db, manpages are installed
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/man | sed -e 's/ *#.*$//'
  - name: set /etc/localtime
    file: state=link force=yes src=/usr/share/zoneinfo/Europe/Berlin dest=/etc/localtime
  - name: ensure various useful tools are installed â€“ sudo, git, vim, less, openssh
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/various_useful | sed -e 's/ *#.*$//'
  - name: ensure boot messages are not cleared on start up
    replace: dest=/etc/systemd/system/getty.target.wants/getty@tty1.service regexp='^TTYVTDisallocate=yes.*$' replace='TTYVTDisallocate=no'

  # Config user.
  - name: create user plom with sudo privileges and bash shell
    user: name=plom groups=sudo shell=/bin/bash
  - name: have config repo in user directory
    git: repo=https://github.com/plomlompom/config dest=/home/plom/config
    become_user: plom
    become_method: su

  # Ensure X window environment.
  - name: ensure minimal X window environment
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/minimal_x | sed -e 's/ *#.*$//'
  - name: ensure 3d acceleration core
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/3d_acceleration | sed -e 's/ *#.*$//'
  #- name: ensure further 3d acceleration and optimus switch
  #  apt: name={{item}} state=present
  #  with_lines: cat ~/config/ansible/files/apt-mark_new/W530/3d_acceleration | sed -e 's/ *#.*$//'
  #- name: ensure user plom is in bumblebee group
  #  user: name=plom groups=bumblebee append=yes
  - name: ensure basic X tools
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/basic_x_tools | sed -e 's/ *#.*$//'

  # Set up pentadactyl.
  - name: ensure browser environment
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/browser_environment | sed -e 's/ *#.*$//'

  # Ensure wifi.
  - name: ensure wifi configuration
    apt: name={{item}} state=present
    with_lines: cat ~/config/ansible/files/apt-mark_new/minimal/wifi | sed -e 's/ *#.*$//'
  #- name: ensure wicd
  #  apt: name={{item}} state=present
  #  with_lines: cat ~/config/ansible/files/apt-mark_new/W530/wicd | sed -e 's/ *#.*$//'

  # Ensure audio/video consumption necessities.
  #- name: ensure multimedia tools
  #  apt: name={{item}} state=present
  #  with_lines: cat ~/config/ansible/files/apt-mark/multimedia | sed -e 's/ *#.*$//'

  # Ensure hotkeys.
  #
  # For some reason, the brightness hotkeys still won't be available unless acpid is restarted (yes, after reboot).
  #- name: ensure hotkeys 
  #  apt: name={{item}} state=present
  #  with_lines: cat ~/config/ansible/files/apt-mark/hotkeys | sed -e 's/ *#.*$//'

  # Remove undesired packages
  - name: collect desired packages
    shell: cat files/apt-mark_new/minimal/* files/apt-mark_new/{{ system_name }}/*  | sed -e 's/ *#.*$//' > /tmp/white_list_unsorted && sort /tmp/white_list_unsorted > /tmp/white_list_sorted
  - name: collect currently installed packages
    shell: dpkg-query -Wf '${Package}\n' > /tmp/all_unsorted && sort /tmp/all_unsorted > /tmp/all_sorted
  - name: create black list of packages to mark as automatically installed from the difference between the required packages and the packages currently installed
    shell: comm -3 /tmp/all_sorted /tmp/white_list_sorted > /tmp/list_black
  - name: mark all packages from black list as automatically installed
    shell: apt-mark auto $(cat /tmp/list_black)
  - name: mark all packages from white list as manually installed
    shell: apt-mark manual $(cat /tmp/white_list_unsorted)
  - name: purge all packages automatically installed that are not depended on
    shell: DEBIAN_FRONTEND=noninteractive apt-get -y --purge autoremove

